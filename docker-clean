#!/bin/bash
# Maintained by Sean Kilgarriff and Killian Brackey at ZZROT Design
#
# The MIT License (MIT)
# Copyright © 2016 ZZROT LLC <docker@zzrot.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# TODO: Revamp for multiple flags together
# TODO: flag containers with mounted volumes (after array todo complete)


#ENVIRONMENT VARIABLES

# @info:	Docker-clean current version
declare VERSION="1.4.1"

# @info:	Required Docker version for Volume functionality
declare REQUIRED_VERSION="1.9.0"

# @info:	Boolean for storing Docker version info
declare HAS_VERSION=false

# @info: Boolean for verbose mode
declare VERBOSE=false

# @info: Boolean for dry run to see before removing
declare DRY_RUN=false

#FUNCTIONS

# @info:    Parses and validates the CLI arguments
# @args:	Global Arguments $@
parseCli(){

	if [ "$#" -eq 0 ]; then
		dockerClean
	elif [[ $# -eq 2 ]]; then

		case $2 in
			-l | --log) VERBOSE=true ;;
			-n | --dry-run) DRY_RUN=true ;;
		esac
		flagOptions $1;

	elif [[ $# -eq 1 ]]; then
		flagOptions $1
	else
		usage
	fi
}

function flagOptions() {
	case $1 in
		-n | --dry-run)
								DRY_RUN=true
								dockerClean ;;
		-l | --log)
								VERBOSE=true
		 						dockerClean ;;
		-s | --stop) stop ;;
		-net | --networks) cleanNetworks;;
		-v | --version) version ;;
		-c | --containers) dockerClean 1 ;;
		-i | --images) dockerClean 2 ;;
		-a | --all) dockerClean 3 ;;
		-h | --help | *) usage ;;
	esac
}

# @info:	Prints out Docker-clean current version
function version {
	echo $VERSION
}

# @info:	Prints out usage
function usage {
  echo
	echo "Options:"
  echo "-h or --help        Opens this help menu"
  echo "-v or --version     Prints the current docker-clean version"
  echo
  echo "-a or --all         Stops and removes all Containers, Images, and Restarts docker"
  echo "-c or --containers  Stops and removes Stopped and Running Containers"
  echo "-i or --images      Stops and removes all Containers and Images"
  echo "-net or --networks  Removes all empty Networks"
	echo "-s or --stop        Stops all running Containers"
	echo
	echo "--dry-run           Adding this additional flag at the end will list items to be"
	echo "                    removed without running the remove or stop commands"
	echo
	echo "-l or --log         Adding this as an additional flag will list all"
	echo "                    image, volume, and container deleting output"
}

# @info:	Prints out 3-point version (000.000.000) without decimals for comparison
# @args:	Docker Version of the client
function printVersion {
     echo "$@" | awk -F. '{ printf("%03d%03d%03d\n", $1,$2,$3); }';
 }

# @info:	Checks Docker Version and then configures the HAS_VERSION var.
 function checkVersion  {
     local Docker_Version="$(docker --version | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')"
     if [ $(printVersion "$Docker_Version") -gt $(printVersion "$REQUIRED_VERSION") ]; then
         HAS_VERSION=true
     else
         echo "Your Version of Docker is below 1.9.0 which is required for full functionality."
         echo "Please upgrade your Docker daemon. Until then, the Volume processing will not work."
     fi
 }

# @info:	Checks to see if Docker is installed and connected
 function checkDocker {
     #Run Docker ps to make sure that docker is installed
     #As well as that the Daemon is connected.
     docker ps &>/dev/null
     DOCKER_CHECK=$?

     #If Docker Check returns 1 (Error), send a message and exit.
     if [ ! "$DOCKER_CHECK" ]; then
         echo "Docker is either not installed, or the Docker Daemon is not currently connected."
         echo "Please check your installation and try again."
         exit 1;
     fi
 }

# @info: Stops all running docker containers.
# TODO make two(or 3) arrays with container names and images (container id)
function stop {
	IFS=$'\n' read -rd '' -a runningContainers <<<"$(docker ps -q)"
	if [[ $DRY_RUN == true ]]; then
		echo "Dry run on stoppage of running containers:"
		if [[ ! $runningContainers ]]; then
			echo "No running containers. Running without -n or --dry-run flag won't stop any containers."
		else
			echo "Running without -n or --dry-run flag will stop the listed containers:"
			for i in "${runningContainers[@]}"; do
				local name="$(docker inspect -f '{{json .Name}}' $i)"
				local path="$(docker inspect -f '{{json .Path}}' $i)"
				local args="$(docker inspect -f '{{json .Args}}' $i)"
				echo "Container ID: $i IMAGE: $path/$args NAME: $name"
			done
		fi # End Dry Run
	else
		if [ ! "$runningContainers" ]; then
			echo "No running containers!"
		else
			local count=0
			echo "Stopping running containers..."
			for i in "${runningContainers[@]}"; do
				if docker stop "$i" 2>&1 | log ; then
				count=$((count+1))
				fi
			done
			echo "Containers stopped: $count"
		fi
	fi
}

# @info:	Removes all stopped docker containers.
# TODO add dry run for created containers
function cleanContainers {
		IFS=$'\n' read -rd '' -a stoppedContainers <<<"$(docker ps -qf STATUS=exited)"
		IFS=$'\n' read -rd '' -a createdContainers <<<"$(docker ps -qf STATUS=created)"

		if [[ $DRY_RUN == true ]]; then
			echo "Dry run on removal of stopped containers:"
			if [[ ! $stoppedContainers ]]; then
				echo "No stopped containers. Running without -n or --dry-run flag won't remove any stopped containers."
				echo
			fi
			if [[ $stoppedContainers ]]; then
				echo "Running without -n or --dry-run flag will remove the listed containers:"
				for i in "${stoppedContainers[@]}"; do
					local name="$(docker inspect -f '{{json .Name}}' $i)"
					local path="$(docker inspect -f '{{json .Path}}' $i)"
					local args="$(docker inspect -f '{{json .Args}}' $i)"
					echo "Container ID: $i IMAGE: $path/$args NAME: $name"
			done
				echo
			fi
			if [[ $createdContainers ]]; then
				echo "Cleaning created containers..."
				for i in "${createdContainers[@]}"; do
					local name="$(docker inspect -f '{{json .Name}}' $i)"
					local path="$(docker inspect -f '{{json .Path}}' $i)"
					local args="$(docker inspect -f '{{json .Args}}' $i)"
					echo "Container ID: $i IMAGE: $path/$args NAME: $name"
			done
				echo
			fi # end dry run

		else
    if [ ! "$stoppedContainers" ]; then
        echo "No Containers To Clean!"
    else
				local count=0
				echo "Cleaning containers..."
				for i in "${stoppedContainers[@]}"; do
					if docker rm "$i" 2>&1 | log ; then
						count=$((count+1))
					fi
				done
				echo "Stopped containers cleaned: $count"
    fi

		if [ "$createdContainers" ]; then
			local count=0
			for i in "${createdContainers[@]}"; do
				if docker rm "$i" 2>&1 | log ; then
					count=$((count+1))
				fi
			done
			echo "Created containers cleaned: $count"
		fi
	fi
}

# @info:	Removes all containers (including running) with force.
function cleanAllContainers {
	IFS=$'\n' read -rd '' -a allContainers <<<"$(docker ps -aq)"

	if [[ $DRY_RUN == true ]]; then
		echo "Dry run on stoppage and removal of all containers:"
		if [[ ! $allContainers ]]; then
			echo "No containers. Running without -n or --dry-run flag won't remove any containers."
			echo
		else
			stopped_container_names=$(docker inspect -f '{{json .Name}}' $allContainers)
			echo "Running without -n or --dry-run flag will stop and remove these" $container_count "containers":
			echo $stopped_container_names
			echo
		fi # End dry run
	else

	if [ ! "$allContainers" ]; then
		echo No Containers To Clean!
	else
		local count=0
		echo "Cleaning containers..."
		for i in "${allContainers[@]}"; do
			docker rm -f "$i" 2>&1 | log
			count=$((count+1))
		done
		echo Containers cleaned: $count
	fi
fi
}

# @info:	Removes all untagged docker images.
#Credit goes to http://jimhoskins.com/2013/07/27/remove-untagged-docker-images.html
function cleanImages {
		# Commented is for older version docker, has a few bugs
		# with parent/child images
    #untaggedImages="$(docker images -a | grep "^<none>" | awk '{print $3}')"
		IFS=$'\n' read -rd '' -a untaggedImages <<<"$(docker images -aq --filter "dangling=true")"

		if [[ $DRY_RUN == true ]]; then
			echo "Dry run on removal of untagged Images:"
			if [[ ! $untaggedImages ]]; then
				echo "No untagged images. Running without -n or --dry-run flag won't remove any untagged images."
				echo
			else
				echo "Running without -n or --dry-run flag will remove the listed untagged images:"
				for i in "${images[@]}"; do
					local repotag="$(docker inspect -f '{{json .RepoTags}}' $i)"
					echo "REPOSITORY/TAG: $repotag IMAGE ID: $i"
				done
				echo
			fi # End dry run
		else
			if [ ! "$untaggedImages" ]; then
	        echo "No Untagged Images!"
	    else
					local count=0
					echo "Cleaning Images..."
					for i in "${untaggedImages[@]}"; do
						if docker rmi -f $i 2>&1 | log ; then
							count=$((count+1))
						fi
					done
					echo "Images cleaned: $count"
	    fi
	fi
}

# @info:	Deletes all Images including tagged
# TODO strip images into an array and remove brackets and add newline
function cleanAllImages {
	IFS=$'\n' read -rd '' -a images <<<"$(docker images -a -q)"
	if [[ $DRY_RUN == true ]]; then
		echo "Dry run on removal of all images:"
		if [[ ! $images ]]; then
			echo "No images. Running without -n or --dry-run flag won't remove any images."
			echo
		else
			echo "Running without -n or --dry-run flag will stop the listed containers:"
			for i in "${images[@]}"; do
				local repotag="$(docker inspect -f '{{json .RepoTags}}' $i)"
				echo "REPOSITORY/TAG: $repotag IMAGE ID: $i"
			done
			echo
		fi # End dry run
	else
		if [ ! "$images" ]; then
			echo "No images to delete!"
		else
			echo "Cleaning images..."
			local tryCount=0
			local count=0
			while [[ "$images" ]] && [[ $tryCount -lt 5 ]]; do
				((tryCount+=1))
				for i in "${images[@]}"; do
					if docker rmi -f $i &>/dev/null ; then
						count=$((count+1))
					fi
				done
			done
			echo "Images cleaned: $count"
		fi
	fi
}

# @info:	Removes all Dangling Docker Volumes.
function cleanVolumes {
	IFS=$'\n' read -rd '' -a danglingVolumes <<<"$(docker volume ls -qf dangling=true)"
	if [[ $DRY_RUN == true ]]; then
		echo "Dry run on removal of dangling volumes:"
		if [[ ! $danglingVolumes ]]; then
			echo "No dangling volumes. Running without -n or --dry-run flag won't remove any dangling volumes."
			echo
		else
			echo "Running without -n or --dry-run flag will stop the listed dangling volumes:"
			for i in "${danglingVolumes[@]}"; do
				local driver="$(docker volume inspect -f '{{json .Driver}}' $i)"
				echo "DRIVER: $driver NAME: $i"
			done
			echo #For spacing
		fi # End dry run
	else
	    if [ ! "$danglingVolumes" ]; then
	        echo "No dangling volumes!"
	    else
					echo "Cleaning volumes..."
					local count=0
	        		if docker volume rm $danglingVolumes 2>&1 | log ; then
						count=$((count+1))
					fi
					echo "Volumes cleaned: $count"
	    fi
	fi
}

function cleanNetworks {
	IFS=$'\n' read -rd '' -a networks <<<"$(docker network ls -q)"
	declare -a emptyNetworks
	for i in "${networks[@]}"; do
		containers="$(docker network inspect -f '{{json .Containers}}' $i)"
		name="$(docker network inspect -f '{{json .Name}}' $i)"
		if [[ -n "$containers" ]] && [[ "$name" != '"bridge"' ]] && [[ "$name" != '"host"' ]] && [[ "$name" != '"none"' ]]; then
			emptyNetworks+=($i)
		fi
	done
	if [[ $DRY_RUN == true ]]; then
		echo "Dry run on removal of networks:"
		if [[ ! $emptyNetworks ]]; then
			echo "No empty networks. Running without -n or --dry-run flag won't remove any networks."
		else
			echo "Running without -n or --dry-run flag will remove the listed networks:"
			for i in "${emptyNetworks[@]}"; do
				local name="$(docker inspect -f '{{json .Name}}' $i)"
				local driver="$(docker inspect -f '{{json .Driver}}' $i)"
				echo "Network ID: $i NAME: $name DRIVER: $driver"
			done
		fi # End Dry Run
	else
		if [ ! "$emptyNetworks" ]; then
			echo "No empty networks!"
			echo
		else
			local count=0
			echo "Removing empty networks..."
			for i in "${emptyNetworks[@]}"; do
				if docker network rm $i 2>&1 | log ; then
					count=$((count+1))
				fi
			done
			echo "Networks removed: $count"
			echo
		fi
	fi
}

# @info:	Restarts and reRuns docker-machine env active machine
function restartMachine {
	operating_system=$(testOS)
	#if [[ $DRY_RUN == false ]]; then
		if [[ $operating_system =~ "mac" || $operating_system =~ 'windows' ]]; then
			active="$(docker-machine active)"
			if [[ $DRY_RUN == false ]]; then
				docker-machine restart $active
			else
				echo "Dry run on Daemon restart:"
				echo "Command that would be used: docker-machine restart $active"
			fi
			eval $(docker-machine env $active)
			echo "Running docker-machine env $active..."
			echo "New IP Address for" $active ":" $(docker-machine ip)
		elif [[ $operating_system =~ "linux" ]]; then
			if [[ $DRY_RUN == false ]]; then
				echo "Restarting Docker..."
				echo "Restarting this service requires sudo privileges"
			else
				echo "Dry run on Daemon restart, requires sudo to check platform:"
			fi
			init_system=$(linuxInitSystem)
			# Upstart covers SysV and OpenRC as well.
			if [[ $init_system =~ 'upstart'  ]]; then
				if [[ $DRY_RUN == false ]]; then
					sudo service docker restart
				else
					echo "Restart command that would be run: sudo service docker restart"
				fi
			elif [[ $init_system =~ 'systemd' ]]; then
				if [[ $DRY_RUN == false ]]; then
					sudo systemctl restart docker.service
				else
					echo "Restart command that would be run: sudo systemctl restart docker.service"
				fi
			elif [[ $init_system =~ 'rc' ]]; then
				if [[ $DRY_RUN == false ]]; then
					sudo launchctl restart docker
				else
					echo "Restart command that would be run: sudo launchctl restart docker"
				fi
			fi
		else
			echo It appears your OS is not compatible with our docker engine restart
			echo Windows compatibility work in progress
			echo It you feel you are seeing this as an error please visit
			echo "https://github.com/ZZROTDesign/docker-clean and open an issue."
			exit 2
		fi
	#else
		#echo "Docker daemon would now restart if docker-clean is run without -n or -dry-run."
		#if [[ $operating_system =~ "linux" ]]; then
	#		init_system=$(linuxInitSystem)
	#		echo "Command that would be used to restart:"
	#		if [[ $init_system =~ 'upstart'  ]]; then
	#			echo "Command that would be used to restart:sudo service docker restart"
#fi
		#fi
	#fi
}

# @info:	Runs the checks before the main code can be run.
function Check {
	checkDocker
	checkVersion
}

# @info:	Default run option, cleans stopped containers and images
# @args:	1 = Force Clean all Containers, 2 = Force Clean Containers and Images. 3 = Force Clean Containers, Images, and Restart
function dockerClean {

	if [ "$1" == 1 ]; then
		cleanAllContainers
		cleanImages
	elif [ "$1" == 2 ]; then
		cleanAllContainers
		cleanAllImages
	elif [ "$1" == 3 ]; then
		cleanAllContainers
		cleanAllImages
	else
		cleanContainers
		cleanImages
	fi

	#Check if Has Version
	if [ $HAS_VERSION == true ]; then
	    cleanVolumes
	fi

	#Always Clean Empty Networks
	cleanNetworks

	#This should be after cleaning the Volumes hence the seperation.
	if [ "$1" == 3 ]; then
		restartMachine
	fi

}

# @info: counts length of string passed in
# Second argument passed in is optional to count the 64 character length of volumes
function count {
		toCount="$1"
		divisor=12
		if [[ $2 ]]; then
			if [[ $2 =~ volume ]]; then
				divisor=64
			fi
			divisor=64
		fi
    length=${#toCount}
		## Works on OSX, Linux, but not Travis CI
		#number_of_occurrences=$(grep -o "" <<< "$toCount" | wc -l)

    if [[ $length != 0 ]]; then
      number_of_occurrences=$(($length % $divisor + 1))
		fi
		echo $number_of_occurrences
}

function log {
	read IN
	if [[ $VERBOSE == true ]]; then
		echo $IN
	fi
}

## ** Script for testing os **
# Modified for our usage from:
# Credit https://stackoverflow.com/questions/3466166/how-to-check-if-running-in-cygwin-mac-or-linux/17072017#17072017?newreg=b1cdf253d60546f0acfb73e0351ea8be
# Echo mac for Mac OS X, echo linux for GNU/Linux, echo windows for Window
function testOS {
  if [ "$(uname)" == "Darwin" ]; then
      # Do something under Mac OS X platform
      echo mac
  elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
      # Do something under GNU/Linux platform
      echo linux
			#!/bin/bash

  elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
      # Do something under Windows NT platform
      echo windows
  fi
}
#END FUNCTIONS

# Function for testing linux initSystem
function linuxInitSystem {
	# To include hidden files
	shopt -s nullglob dotglob

	# Get sudo privileges
	if [ $EUID != 0 ]; then
    sudo "$0" "$@" &>/dev/null
    #exit $?
fi
# Directories to check
# Upstart covers SysV and OpenRC as well.
	upstart=(/etc/init.d/docker)
	systemd=(/etc/systemd/docker)
	rc=(/etc/rc.d/docker)
	initSystem=""
	#files=(/some/dir/*)
	if [ ${#upstart[@]} -gt 0 ]; then
		initSystem=upstart
	elif [ ${#systemd[@]} -gt 0 ]; then
		initSystem=systemd
	elif [ ${#rc[@]} -gt 0 ]; then
		initSystem=rc
	fi
	echo $initSystem
	}

# @info:	Main function
Check
parseCli "$@"
exit 0
